{"version":3,"sources":["layout/MobileNav.js","components/PlantGraphic.js","components/Status.js","hooks/useStatusQuery.js","hooks/usePlantData.js","pages/Main.js","styles/theme.js","services/apollo.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","stickToBottom","width","position","bottom","backgroundColor","MobileNav","React","useState","value","setValue","classes","BottomNavigation","role","onChange","event","newValue","className","BottomNavigationAction","label","icon","PlantGraphic","plantStatus","Grid","direction","justify","alignItems","container","item","xs","style","minWidth","animationData","sadPlantAnimation","happyPlantAnimation","Status","capStatus","temp","cap","tempStatus","wrap","Typography","variant","align","paddingBottom","useStatusQuery","id","query","gql","options","variables","useQuery","data","error","loading","getCurrentStatus","usePlantData","plantData","Box","styled","div","palette","spacing","typography","list","height","pb","display","flexDirection","justifyContent","paddingTop","fullWidth","containerColor","Main","anchor","top","state","setState","toggleDrawer","open","type","key","Container","maxWidth","IconButton","aria-label","onClick","fontSize","SwipeableDrawer","onClose","onOpen","PaperProps","onKeyDown","p","sm","md","theme","createMuiTheme","primary","main","allVariants","fontFamily","overrides","MuiCssBaseline","body","background","customFetch","uri","a","headers","process","fetch","ApolloClient","link","HttpLink","cache","InMemoryCache","App","client","apolloClient","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d55d654.chunk.js","sourcesContent":["import React from \"react\";\n// import PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { BottomNavigation, BottomNavigationAction } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EcoIcon from \"@material-ui/icons/Eco\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\nconst useStyles = makeStyles({\n  stickToBottom: {\n    width: \"100%\",\n    position: \"fixed\",\n    bottom: 0,\n    backgroundColor: \"#e9e8df\",\n  },\n});\n\nexport const MobileNav = () => {\n  const [value, setValue] = React.useState(\"recents\");\n  const classes = useStyles();\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <BottomNavigation\n      role=\"contentinfo\"\n      value={value}\n      onChange={handleChange}\n      className={classes.stickToBottom}\n    >\n      <BottomNavigationAction label=\"Add\" value=\"All\" icon={<AddIcon />} />\n      <BottomNavigationAction\n        label=\"View All\"\n        value=\"View All\"\n        icon={<EcoIcon />}\n      />\n      <BottomNavigationAction\n        label=\"Settings\"\n        value=\"Settings\"\n        icon={<SettingsIcon />}\n      />\n    </BottomNavigation>\n  );\n};\n\n// MobileNav.propTypes = {};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Lottie from \"lottie-react\";\n\nimport { Grid } from \"@material-ui/core\";\n\nimport sadPlantAnimation from \"../styles/assets/lottie/sad-plant.json\";\nimport happyPlantAnimation from \"../styles/assets/lottie/happy-plant.json\";\n\nexport const PlantGraphic = ({ plantStatus }) => {\n  return (\n    <Grid\n      className=\"plant-graphic\"\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n      container\n    >\n      <Grid item xs={12} style={{ minWidth: 200 }}>\n        <Lottie\n          animationData={\n            plantStatus === \"LOW\" ? sadPlantAnimation : happyPlantAnimation\n          }\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nPlantGraphic.propTypes = {\n  plantStatus: PropTypes.string,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Typography } from \"@material-ui/core\";\n\nexport const Status = ({ capStatus, temp, cap, tempStatus }) => {\n\n  return (\n    <Grid\n      className=\"plant-status\"\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n      container\n      wrap=\"nowrap\"\n    >\n      <Grid item xs={12}>\n        <Typography variant=\"h6\" align=\"center\" style={{ paddingBottom: 10 }}>\n          {capStatus === \"LOW\"\n            ? \"Your plant needs some water!\"\n            : \"Your plant is happy!\"}\n        </Typography>\n        <Typography variant=\"body2\" align=\"center\">\n          The surrounding temperature is {temp}ยบ F which is {tempStatus}.\n        </Typography>\n        <Typography key={cap} variant=\"body2\" align=\"center\">\n          It's got a capacitive moisture reading of {cap} which is {capStatus}.\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nStatus.propTypes = Status.propTypes = {\n  cap: PropTypes.string,\n  capStatus: PropTypes.string,\n  temp: PropTypes.string,\n  tempStatus: PropTypes.string\n};\n","import { useQuery, gql } from '@apollo/client';\n\n\nconst useStatusQuery = ({id}) => {\n\n  const query = gql`\n  query($id: String!) {\n    getCurrentStatus(id: $id) {\n      id\n      temp\n      cap\n      tempStatus\n      capStatus\n      reportTime\n    }\n  }\n`;\n\n  const options = {\n    variables: { id }\n    // pollInterval: 30000, taking this out\n  };\n\n  const { data, error, loading } = useQuery(query, options);\n\n  return {\n    loading,\n    error,\n    data: data ? data.getCurrentStatus[0] : data\n  };\n\n}\n\nexport default useStatusQuery\n","import useStatusQuery from \"./useStatusQuery\";\n\nconst usePlantData = ({id}) => {\n  return {\n    plantData: useStatusQuery({id})\n  }\n\n};\n\nexport default usePlantData;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\nimport { IconButton, Typography, Container } from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport { palette, spacing, typography } from \"@material-ui/system\";\n\nimport { MobileNav } from \"../layout\";\nimport { PlantGraphic, Status } from \"../components\";\n\nimport usePlantData from \"../hooks/usePlantData\";\n\n\n\nconst Box = styled.div`\n  ${palette}${spacing}${typography}\n`;\n\nconst useStyles = makeStyles({\n  list: {\n    height: \"40vh\",\n  },\n  pb: {\n    paddingBottom: 10,\n  },\n  container: {\n    height: \"calc(100vh - 56px)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    paddingTop: 10,\n    paddingBottom: 40,\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  containerColor: {\n    backgroundColor: \"#e9e8df\",\n  },\n});\n\nexport const Main = () => {\n  const classes = useStyles();\n\n  const [state, setState] = React.useState({\n    top: false,\n  });\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (\n      event &&\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const { plantData } = usePlantData({ id: \"Sylvia Pothos\" });\n\n  const list = (anchor) => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <Box className=\"test\" p={{ xs: 2, sm: 3, md: 4 }}>\n        <Typography variant=\"h6\" className={classes.pb}>\n          How to Use\n        </Typography>\n        <Typography variant=\"body2\" className={classes.pb}>\n          Get a sense of how much water your plant needs at a glance! Use this\n          app with the capacitive moisture sensor to get an understanding of how\n          damp the soil is.\n        </Typography>\n        <Typography variant=\"body2\">\n          If the plant leaves are brown, show your plant a little love today.\n        </Typography>\n      </Box>\n    </div>\n  );\n\n  return (\n    <>\n      <Container maxWidth='sm' className={classes.container}>\n        <div className={classes.fullWidth}>\n          <IconButton aria-label='info' onClick={toggleDrawer(\"top\", true)}>\n            <InfoIcon fontSize='small' />\n          </IconButton>\n        </div>\n        <SwipeableDrawer\n          anchor={\"top\"}\n          open={state[\"top\"]}\n          onClose={toggleDrawer(\"top\", false)}\n          onOpen={toggleDrawer(\"top\", true)}\n          PaperProps={{ className: classes.containerColor }}\n        >\n          {list(\"top\")}\n        </SwipeableDrawer>\n        <Typography variant='h4' align='center'>\n          {plantData.loading ? \"Loading...\" : plantData.data.id}\n        </Typography>\n        {plantData.loading ? null : (\n          <PlantGraphic plantStatus={plantData.data.capStatus} />\n        )}\n        {plantData.loading ? null :\n        <Status\n          tempStatus={plantData.data.tempStatus}\n          capStatus={plantData.data.capStatus}\n          temp={plantData.data.temp}\n          cap={plantData.data.cap}\n        />\n        }\n\n      </Container>\n      <MobileNav />\n    </>\n  );\n};\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#78c58d\",\n    },\n  },\n  typography: {\n    allVariants: {\n      fontFamily: `'Noto Sans TC', sans-serif`,\n    },\n  },\n  overrides: {\n    MuiCssBaseline: {\n      \"@global\": {\n        body: {\n          background: `linear-gradient(0deg, rgba(191, 160, 148,.5) 0%, rgba(233,232,223,1) 100%)`,\n        },\n      },\n    },\n  },\n});\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { HttpLink } from 'apollo-link-http';\n\nconst URI = process.env.REACT_APP_GRAPHQL_URI;\n\nexport const customFetch = async (uri, options) => {\n  options.headers[\"x-api-key\"] = process.env.REACT_APP_API_KEY;\n  return fetch(uri, options);\n};\n\nexport default new ApolloClient({\n  link: new HttpLink({\n    uri: URI,\n    fetch: customFetch,\n  }),\n  cache: new InMemoryCache(),\n});","import { ThemeProvider } from \"@material-ui/core\";\nimport { Main } from \"./pages\";\nimport { theme } from \"./styles/theme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ApolloProvider } from '@apollo/client';\nimport apolloClient from './services/apollo';\n\nfunction App() {\n  return (\n    <ApolloProvider client={apolloClient}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Main />\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}